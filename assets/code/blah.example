import React from "react";
import ReactDOM from "react-dom";


class TabList extends React.Component {
  render() {
    const children = React.Children.map(this.props.children, (child, index) => {
      return React.cloneElement(child, {
        isActive: index === this.props.activeIndex,
        onClick: () => this.props.onActivate(index)
      });
    });

    return <div style={styles.tabs}>{children}</div>;
  }
}

class Tab extends React.Component {
  render() {
    return (
     <div
       onClick={this.props.isDisabled ? null : this.props.onClick}
       style={this.props.isDisabled ? styles.disabledTab : (
         this.props.isActive ? styles.activeTab : styles.tab
       )}
     >
       {this.props.children}
     </div>
    );
  }
}

class TabPanels extends React.Component {
  render() {
    return (
     <div style={styles.tabPanels}>
       {this.props.children[this.props.activeIndex]}
     </div>
    );
  }
}

class TabPanel extends React.Component {
  render() {
    return <div>{this.props.children}</div>;
  }
}

class Tabs extends React.Component {
  state = {
    activeIndex: 0
  };

  render() {
    const children = React.Children.map(this.props.children, (child, index) => {
      if (child.type === TabPanels) {
        return React.cloneElement(child, {
          activeIndex: this.state.activeIndex
        });
      } else if (child.type === TabList) {
        return React.cloneElement(child, {
          activeIndex: this.state.activeIndex,
          onActivate: (activeIndex) => this.setState({ activeIndex })
        });
      } else {
        return child;
      }
    });

    return <div>{children}</div>;
  }
}

class App extends React.Component {
  render() {
    return (
       <div>
         <Tabs>
           <TabList>
             <Tab>Tacos</Tab>
             <Tab isDisabled>Burritos</Tab>
             <Tab>Coconut Korma</Tab>
           </TabList>

           <TabPanels>
             <TabPanel>
               <p>Tacos are delicious</p>
             </TabPanel>
             <TabPanel>
               <p>Sometimes a burrito is what you really need</p>
             </TabPanel>
             <TabPanel>
               <p>Might be your best option</p>
             </TabPanel>
           </TabPanels>
         </Tabs>



         <select>
           <optiongroup>
             <option>Tacos</option>
             <option>Burritos</option>
             <option>Coconut Korma</option>
           </optiongroup>
         </select>




       </div>
    );
  }
}




class DataTabs extends React.Component {
 static defaultProps = {
   disabled: []
 };

 render() {
   return (
     <Tabs>
       <TabList>
         {this.props.data.map((item, index) => (
           <Tab key={item.label}
                disabled={this.props.disabled.indexOf(index) !== -1}>
             {item.label}
           </Tab>
         ))}
       </TabList>

       <TabPanels>
         {this.props.data.map((item) => (
           <TabPanel key={item.label}>{item.description}</TabPanel>
         ))}
       </TabPanels>
     </Tabs>
   )
 }
}

class App extends React.Component {
 render() {
   const tabData = [
     { label: 'Tacos',
       description: <p>Tacos are delicious</p>
     },
     { label: 'Burritos',
       description: <p>Sometimes a burrito is what you really need</p>
     },
     { label: 'Coconut Korma',
       description: <p>Might be your best option</p>
     }
   ]

   return (
     <div>
       <DataTabs data={tabData}/>
     </div>
   )
 }
}


class App extends React.Component {
  render() {
    const selectData = ['Tacos', 'Burritos', 'Coconut Korma'];

    return (
      <select>
        <optiongroup>
          {selectData.map((item, index) => (
            <option key={index} value={item.toLowerCase()}>
              {item}
            </option>
          ))}
        </optiongroup>
      </select>
    )
  }
}


ReactDOM.render(<App/>, document.getElementById("app"));

const styles;




<select>
  <optiongroup>
    <option></option>
    <option></option>
    <option></option>
  </optiongroup>
</select>

const selectElem = {

}